autoplot(pca) + geom_density2d() + ggtitle('First 2 PCs of pca')
pc.vars <- cumsum(pca$sdev^2/sum(pca$sdev^2))
print(paste0("Variance Explained by the first 2 principal components = ", pc.vars[2]))
ggplot(aes(y = quality, x = as.factor(clusters)), data = wine_data) + geom_boxplot()
ggplot(aes(y = quality, x = factor(clusters)), data = wine_data) + geom_boxplot()
# 5-mediods clustering
results.pam <- pam(features.scaled, k=6)
fviz_cluster(results.pam, data=wine_data, main='K-Mediods Clustering K=6')
wine_data$clusters <- as.factor(results.pam$clustering)
# PCA
pca <- prcomp(features.scaled, center=T)
autoplot(pca) + geom_density2d() + ggtitle('First 2 PCs of pca')
pc.vars <- cumsum(pca$sdev^2/sum(pca$sdev^2))
print(paste0("Variance Explained by the first 2 principal components = ", pc.vars[2]))
ggplot(aes(y = quality, x = clusters), data = wine_data) + geom_boxplot()
wine_data[wine_data$clusters==1,]
wine_data$quality[wine_data$clusters==1]
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
wine_data[featuer_names,]
wine_data[feature_names,]
wine_data[[feature_names,]]
names(wine_data)
wine_data[c(-12, -13), ]
# create list
stan_list <- list()
stan_list$N <- nrow(wine_data) # number of observations
stan_list$M <- length(feature_names) # number of features
stan_list$J <- 6 # number of cluster
stan_list$clusters <- wine_data$clusters
stan_list$features <- wine_data[c(-12, -13), ]
stan_list$quality <- wine_data$quality
stan_list$mean_quality <- mean(wine_data$quality)
# stan code
stan_code <- c("
data {
int N; // Number of observations
int M; // Number of features = 11
int J; // Number of clusters = 6
int clusters[N];
real<lower=0> features[N, M];
int<lower=0, upper=1> quality[N]; # response
real mean_quality; // mean(quality)
}
parameters {
real<lower=0> sigma_0;
real beta_0;
real<lower=0> sigma_ij[M, J];
real beta_ij[M, J];
}
model {
// Prior
sigma_0 ~ uniform(0, 100);
beta_0 ~ normal(mean_quality, sigma_0);
for (i in 1:M) {
for (j in 1:J) {
sigma_ij[i, j] ~ normal(0, 100);
beta_ij[i, j] ~ normal(0, sigma_ij[i, j]);
}
}
// Likelihood
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y = beta_0;
for (m in 1:M) {
y = y + features[n, m] * beta_cluster[m];
}
quality[n] ~ normal(y, sigma_0);
}
}
generated quantities {
real quality_rep[N]; // Draws from posterior predictive dist
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y_rep = beta_0;
for (m in 1:M) {
y_rep = y_rep + features[n, m] * beta_cluster[m];
}
quality_rep[n] = y_rep;
}
}
")
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
class(wine_data$clusters)
# 5-mediods clustering
results.pam <- pam(features.scaled, k=6)
fviz_cluster(results.pam, data=wine_data, main='K-Mediods Clustering K=6')
wine_data$clusters <- results.pam$clustering
# PCA
pca <- prcomp(features.scaled, center=T)
autoplot(pca) + geom_density2d() + ggtitle('First 2 PCs of pca')
pc.vars <- cumsum(pca$sdev^2/sum(pca$sdev^2))
print(paste0("Variance Explained by the first 2 principal components = ", pc.vars[2]))
ggplot(aes(y = quality, x = as.factor(clusters)), data = wine_data) + geom_boxplot()
# import libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(splines)
library(gam)
library(cluster)
library(mclust)
library(factoextra)
library(NbClust)
library(dbscan)
library(reshape2)
library(devtools)
library(ggfortify)
library(corrplot)
library(matrixStats)
# read data
wine_data = read.csv("winequality-red.csv")
head(wine_data)
# split response and features
quality <- wine_data$quality
feature_names <- colnames(wine_data)[-12]
sapply(wine_data, class)
# 5-mediods clustering
results.pam <- pam(features.scaled, k=6)
fviz_cluster(results.pam, data=wine_data, main='K-Mediods Clustering K=6')
wine_data$clusters <- results.pam$clustering
# PCA
pca <- prcomp(features.scaled, center=T)
autoplot(pca) + geom_density2d() + ggtitle('First 2 PCs of pca')
pc.vars <- cumsum(pca$sdev^2/sum(pca$sdev^2))
print(paste0("Variance Explained by the first 2 principal components = ", pc.vars[2]))
ggplot(aes(y = quality, x = as.factor(clusters)), data = wine_data) + geom_boxplot()
# create list
stan_list <- list()
stan_list$N <- nrow(wine_data) # number of observations
stan_list$M <- length(feature_names) # number of features
stan_list$J <- 6 # number of cluster
stan_list$clusters <- wine_data$clusters
stan_list$features <- wine_data[c(-12, -13), ]
stan_list$quality <- wine_data$quality
stan_list$mean_quality <- mean(wine_data$quality)
# stan code
stan_code <- c("
data {
int N; // Number of observations
int M; // Number of features = 11
int J; // Number of clusters = 6
int clusters[N];
real<lower=0> features[N, M];
int<lower=0, upper=1> quality[N]; # response
real mean_quality; // mean(quality)
}
parameters {
real<lower=0> sigma_0;
real beta_0;
real<lower=0> sigma_ij[M, J];
real beta_ij[M, J];
}
model {
// Prior
sigma_0 ~ uniform(0, 100);
beta_0 ~ normal(mean_quality, sigma_0);
for (i in 1:M) {
for (j in 1:J) {
sigma_ij[i, j] ~ normal(0, 100);
beta_ij[i, j] ~ normal(0, sigma_ij[i, j]);
}
}
// Likelihood
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y = beta_0;
for (m in 1:M) {
y = y + features[n, m] * beta_cluster[m];
}
quality[n] ~ normal(y, sigma_0);
}
}
generated quantities {
real quality_rep[N]; // Draws from posterior predictive dist
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y_rep = beta_0;
for (m in 1:M) {
y_rep = y_rep + features[n, m] * beta_cluster[m];
}
quality_rep[n] = y_rep;
}
}
")
class(wine_data$clusters)
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
library(bayesplot)
library(rstan)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
wine_data$clusters
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
# create list
stan_list <- list()
stan_list$N <- nrow(wine_data) # number of observations
stan_list$M <- length(feature_names) # number of features
stan_list$J <- 6 # number of cluster
stan_list$clusters <- wine_data$clusters
stan_list$features <- wine_data[c(-12, -13), ]
stan_list$quality <- wine_data$quality
stan_list$mean_quality <- mean(wine_data$quality)
# stan code
stan_code <- c("
data {
int N; // Number of observations
int M; // Number of features = 11
int J; // Number of clusters = 6
int clusters[N];
real<lower=0> features[N, M];
int<lower=0, upper=1> quality[N]; # response
real mean_quality; // mean(quality)
}
parameters {
real<lower=0> sigma_0;
real beta_0;
real<lower=0> sigma_ij[M, J];
real beta_ij[M, J];
}
model {
// Prior
sigma_0 ~ uniform(0, 100);
beta_0 ~ normal(mean_quality, sigma_0);
for (i in 1:M) {
for (j in 1:J) {
sigma_ij[i, j] ~ normal(0, 100);
beta_ij[i, j] ~ normal(0, sigma_ij[i, j]);
}
}
// Likelihood
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y = beta_0;
for (m in 1:M) {
y = y + features[n, m] * beta_cluster[m];
}
quality[n] ~ normal(y, sigma_0);
}
}
generated quantities {
real quality_rep[N]; // Draws from posterior predictive dist
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y_rep = beta_0;
for (m in 1:M) {
y_rep = y_rep + features[n, m] * beta_cluster[m];
}
quality_rep[n] = y_rep;
}
}
")
library(bayesplot)
library(rstan)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
ncol(stan_list$features)
# create list
stan_list <- list()
stan_list$N <- nrow(wine_data) # number of observations
stan_list$M <- length(feature_names) # number of features
stan_list$J <- 6 # number of cluster
stan_list$clusters <- wine_data$clusters
stan_list$features <- wine_data[, c(-12, -13)]
stan_list$quality <- wine_data$quality
stan_list$mean_quality <- mean(wine_data$quality)
# stan code
stan_code <- c("
data {
int N; // Number of observations
int M; // Number of features = 11
int J; // Number of clusters = 6
int clusters[N];
real<lower=0> features[N, M];
int<lower=0, upper=1> quality[N]; # response
real mean_quality; // mean(quality)
}
parameters {
real<lower=0> sigma_0;
real beta_0;
real<lower=0> sigma_ij[M, J];
real beta_ij[M, J];
}
model {
// Prior
sigma_0 ~ uniform(0, 100);
beta_0 ~ normal(mean_quality, sigma_0);
for (i in 1:M) {
for (j in 1:J) {
sigma_ij[i, j] ~ normal(0, 100);
beta_ij[i, j] ~ normal(0, sigma_ij[i, j]);
}
}
// Likelihood
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y = beta_0;
for (m in 1:M) {
y = y + features[n, m] * beta_cluster[m];
}
quality[n] ~ normal(y, sigma_0);
}
}
generated quantities {
real quality_rep[N]; // Draws from posterior predictive dist
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y_rep = beta_0;
for (m in 1:M) {
y_rep = y_rep + features[n, m] * beta_cluster[m];
}
quality_rep[n] = y_rep;
}
}
")
library(bayesplot)
library(rstan)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
wine_data$quality[1,]
wine_data$quality[1]
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
# create list
stan_list <- list()
stan_list$N <- nrow(wine_data) # number of observations
stan_list$M <- length(feature_names) # number of features
stan_list$J <- 6 # number of cluster
stan_list$clusters <- wine_data$clusters
stan_list$features <- wine_data[, c(-12, -13)]
stan_list$quality <- wine_data$quality
stan_list$mean_quality <- mean(wine_data$quality)
# stan code
stan_code <- c("
data {
int N; // Number of observations
int M; // Number of features = 11
int J; // Number of clusters = 6
int clusters[N];
real<lower=0> features[N, M];
int<lower=0> quality[N]; # response
real mean_quality; // mean(quality)
}
parameters {
real<lower=0> sigma_0;
real beta_0;
real<lower=0> sigma_ij[M, J];
real beta_ij[M, J];
}
model {
// Prior
sigma_0 ~ uniform(0, 100);
beta_0 ~ normal(mean_quality, sigma_0);
for (i in 1:M) {
for (j in 1:J) {
sigma_ij[i, j] ~ normal(0, 100);
beta_ij[i, j] ~ normal(0, sigma_ij[i, j]);
}
}
// Likelihood
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y = beta_0;
for (m in 1:M) {
y = y + features[n, m] * beta_cluster[m];
}
quality[n] ~ normal(y, sigma_0);
}
}
generated quantities {
real quality_rep[N]; // Draws from posterior predictive dist
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y_rep = beta_0;
for (m in 1:M) {
y_rep = y_rep + features[n, m] * beta_cluster[m];
}
quality_rep[n] = y_rep;
}
}
")
library(bayesplot)
library(rstan)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46,
refresh = FALSE)
rstan:::rstudio_stanc("~/Documents/HARVARD/2018_Spring/AC209b/midterm/hier_model.stan")
# create list
stan_list <- list()
stan_list$N <- nrow(wine_data) # number of observations
stan_list$M <- length(feature_names) # number of features
stan_list$J <- 6 # number of cluster
stan_list$clusters <- wine_data$clusters
stan_list$features <- wine_data[, c(-12, -13)]
stan_list$quality <- wine_data$quality
stan_list$mean_quality <- mean(wine_data$quality)
# stan code
stan_code <- c("
data {
int N; // Number of observations
int M; // Number of features = 11
int J; // Number of clusters = 6
int clusters[N];
real<lower=0> features[N, M];
int<lower=0> quality[N]; # response
real mean_quality; // mean(quality)
}
parameters {
real<lower=0> sigma_0;
real beta_0;
real<lower=0> sigma_ij[M, J];
real beta_ij[M, J];
}
model {
// Prior
sigma_0 ~ uniform(0, 100);
beta_0 ~ normal(mean_quality, sigma_0);
for (i in 1:M) {
for (j in 1:J) {
sigma_ij[i, j] ~ normal(0, 100);
}
}
for (i in 1:M) {
for (j in 1:J) {
beta_ij[i, j] ~ normal(0, sigma_ij[i, j]);
}
}
// Likelihood
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y = beta_0;
for (m in 1:M) {
y = y + features[n, m] * beta_cluster[m];
}
quality[n] ~ normal(y, sigma_0);
}
}
generated quantities {
real quality_rep[N]; // Draws from posterior predictive dist
for (n in 1:N) {
real beta_cluster[M] = beta_ij[, clusters[n]];
real y_rep = beta_0;
for (m in 1:M) {
y_rep = y_rep + features[n, m] * beta_cluster[m];
}
quality_rep[n] = y_rep;
}
}
")
library(bayesplot)
library(rstan)
options(mc.cores = parallel::detectCores())
wine.fit <- stan(model_code = stan_code,
data = stan_list,
iter = 2000,
chains = 4,
seed = 46)
