y_rep[n] = bernoulli_rng(inv_logit(beta_0j[district_test[n]] + beta_1j[district_test[n]]*urban_test[n] +        beta_2*age_mean_test[n] + beta_3*living_children_test[n]));
}
}
")
# fit the model
options(mc.cores = parallel::detectCores())
fit4b <- stan(model_code = stan_code4b,
data = stan_list3e,
iter = 2000,
chains = 4,
seed = 46)
y_rep4b_mean <- colMeans(as.matrix(fit4b, pars="y_rep"))
y_pred4b <- y_rep4b_mean >= 0.5
y_true <- test$contraceptive_use
accuracy4b <- sum(y_pred4b == y_true)/length(y_true)
accuracy4b # CHECK >= 0.5 (0.6897622) OR > 0.5 (0.688728)
y_rep4b_mean <- colMeans(as.matrix(fit4b, pars="y_rep"))
y_pred4b <- y_rep4b_mean > 0.5
y_true <- test$contraceptive_use
accuracy4b <- sum(y_pred4b == y_true)/length(y_true)
accuracy4b # CHECK >= 0.5 (0.6897622) OR > 0.5 (0.688728)
# stan code for problem 4
stan_code4b1 <- c("
data {
// Number of observations
int N;
// Number of districts
int J;
// List of features, one for each observation
int district[N];
int<lower=0, upper=1> urban[N];
int living_children[N];
real age_mean[N];
// Binary response (integer array)
int<lower=0, upper=1> Y[N];
int N_test;
// Number of districts
int J_test;
// List of features, one for each observation
int district_test[N_test];
int<lower=0, upper=1> urban_test[N_test];
int living_children_test[N_test];
real age_mean_test[N_test];
}
parameters {
real mu_0;
real<lower=0> sigma_0;
real beta_0j[J];  // bias term vary by J districts
real beta_1j[J]; // urban vary by J districts
real<lower=0> sigma_1;
real beta_2;
real beta_3j[J]; // living children vary by J districts
real<lower=0> sigma_3;
}
model {
// Prior
mu_0 ~ normal(0,100);
sigma_0 ~ exponential(0.1);
sigma_1 ~ exponential(0.1);
sigma_3 ~ exponential(0.1);
beta_2 ~ normal(0, 100);
// J different beta_0j, beta_1j priors
for (j in 1:J) {
beta_0j[j] ~ normal(mu_0, sigma_0);
beta_1j[j] ~ normal(0,sigma_1);
beta_3j[j] ~ normal(0, sigma_3);
}
// Likelihood
for (n in 1:N) {
Y[n] ~ bernoulli_logit(beta_0j[district[n]] + beta_1j[district[n]]*urban[n] + beta_2*age_mean[n] + beta_3j[district[n]]*living_children[n]);
}
}
generated quantities {
int y_rep[N_test];         // Draws from posterior predictive dist
for (n in 1:N_test) {
y_rep[n] = bernoulli_rng(inv_logit(beta_0j[district_test[n]] + beta_1j[district_test[n]]*urban_test[n] + beta_2*age_mean_test[n] + beta_3j[district_test[n]]*living_children_test[n]));
}
}
")
# fit the model
options(mc.cores = parallel::detectCores())
fit4b1 <- stan(model_code = stan_code4b1,
data = stan_list3e,
iter = 2000,
chains = 4,
seed = 46)
y_rep4b1_mean <- colMeans(as.matrix(fit4b1, pars="y_rep"))
y_pred4b1 <- y_rep4b1_mean >= 0.5
accuracy4b1 <- sum(y_pred4b1 == y_true)/length(y_true)
accuracy4b1
y_rep4b_mean <- colMeans(as.matrix(fit4b, pars="y_rep"))
y_pred4b <- y_rep4b_mean > 0.5
y_true <- test$contraceptive_use
accuracy4b <- sum(y_pred4b == y_true)/length(y_true)
accuracy4b # CHECK >= 0.5 (0.6897622) OR > 0.5 (0.688728)
y_rep4b_mean <- colMeans(as.matrix(fit4b, pars="y_rep"))
y_pred4b <- y_rep4b_mean >= 0.5
y_true <- test$contraceptive_use
accuracy4b <- sum(y_pred4b == y_true)/length(y_true)
accuracy4b # CHECK >= 0.5 (0.6897622) OR > 0.5 (0.688728)
y_rep4b1_mean <- colMeans(as.matrix(fit4b1, pars="y_rep"))
y_pred4b1 <- y_rep4b1_mean >= 0.5
accuracy4b1 <- sum(y_pred4b1 == y_true)/length(y_true)
accuracy4b1
games2017 = read.table("data/Bayesball.txt", sep=',')
data2017 = games2017[,c(7,4,11,10)]
names(data2017) = c("Home","Away","Home_Score","Away_Score")
head(data2017)
n_teams <- length(unique(data2017$Home))
N_ij <- matrix(rep(0, n_teams*n_teams), ncol = n_teams)
V_ij <- matrix(rep(0, n_teams*n_teams), ncol = n_teams)
for (i in 1:length(levels(data2017$Home))) {
home <- levels(data2017$Home)[i]
for (j in 1:length(levels(data2017$Away))) {
away <- levels(data2017$Away)[j]
if (away != home) {
df_ij <- data2017[(data2017$Home == home & data2017$Away == away) | (data2017$Home == away & data2017$Away == home), ]
N_ij[i, j] <- nrow(df_ij)
V_ij[i, j] <- nrow(df_ij[df_ij$Home_Score > df_ij$Away_Score, ])
}
else {
N_ij[i, j] <- 0
V_ij[i, j] <- 0
}
}
}
# create list
stan_list_mlb <- list()
stan_list_mlb$n_team <- n_teams
stan_list_mlb$N <- N_ij
stan_list_mlb$V <- V_ij
# stan code
stan_code_mlb <- c("data {
int n_team; // Number of teams
int N[n_team, n_team];
int V[n_team, n_team]; // Bernoulli Response: {0, 1} array
}
parameters {
real<lower=0> sigma;
real lambda[n_team];
}
model {
// Prior
sigma ~ uniform(0, 50);
for (t in 1:n_team) {
lambda[t] ~ normal(0, sigma);
}
// Likelihood
for (i in 1:n_team) {
for (j in 1:n_team) {
V[i, j] ~ binomial(N[i, j], exp(lambda[i])/(exp(lambda[i]) + exp(lambda[j])));
}
}
}
generated quantities {
int V_rep[n_team, n_team];         // Draws from posterior predictive dist
for (i in 1:n_team) {
for (j in 1:n_team) {
V_rep[i, j] = binomial_rng(N[i, j], exp(lambda[i])/(exp(lambda[i]) + exp(lambda[j])));
}
}
}
")
options(mc.cores = parallel::detectCores())
mlb_fit <- stan(model_code = stan_code_mlb,
data = stan_list_mlb,
iter = 2000,
chains = 4,
seed = 46)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
mean_team_strength <- rep(0, n_teams)
for (i in 1:n_teams) {
mean_team_strength[i] <- mean(mlb_pi[, i])
}
# mean_team_strength <- colMeans(mlb_pi)
print(mean_team_strength)
dodgers_strength <- mean_team_strength[levels(data2017$Home) == 'LAN']
astros_strength <- mean_team_strength[levels(data2017$Home) == 'HOU']
total_dodgers_win <- 0
total_astros_win <- 0
for (i in 1:1000) {
dodgers_win <- 0
astros_win <- 0
while (dodgers_win < 4 & astros_win < 4) {
dodgers <- rbinom(n=1, size=1, dodgers_strength/(dodgers_strength+astros_strength))
if (dodgers == 1) {
dodgers_win <- dodgers_win + 1
}
else {
astros_win <- astros_win + 1
}
}
if (dodgers_win > astros_win) {
total_dodgers_win <- total_dodgers_win + 1
}
else {
total_astros_win <- total_astros_win + 1
}
}
print(paste0('Based on 1000 simulations, the probability that the Astros would have won the 2017 World Series is ', total_astros_win/10, ' %'))
N_ij
V_ij
V_ij[1:10, 1:10]
N_ij[1:10, 1:10]
levels(data2017$Home)
mlb_fit
n_teams <- length(unique(data2017$Home))
N_ij <- matrix(rep(0, n_teams*n_teams), ncol = n_teams)
V_ij <- matrix(rep(0, n_teams*n_teams), ncol = n_teams)
for (i in 1:length(levels(data2017$Home))) {
home <- levels(data2017$Home)[i]
for (j in 1:length(levels(data2017$Away))) {
away <- levels(data2017$Away)[j]
if (away != home) {
df1_ij <- data2017[data2017$Home == home & data2017$Away == away, ]
df2_ij <- data2017[data2017$Home == away & data2017$Away == home, ]
N_ij[i, j] <- nrow(df1_ij) + nrow(df2_ij)
v1 <- nrow(df1_ij[df1_ij$Home_Score > df1_ij$Away_Score, ])
v2 <- nrow(df2_ij[df2_ij$Home_Score < df2_ij$Away_Score, ])
V_ij[i, j] <- v1 + v2
}
else {
N_ij[i, j] <- 0
V_ij[i, j] <- 0
}
}
}
# create list
stan_list_mlb <- list()
stan_list_mlb$n_team <- n_teams
stan_list_mlb$N <- N_ij
stan_list_mlb$V <- V_ij
# stan code
stan_code_mlb <- c("data {
int n_team; // Number of teams
int N[n_team, n_team];
int V[n_team, n_team]; // Bernoulli Response: {0, 1} array
}
parameters {
real<lower=0> sigma;
real lambda[n_team];
}
model {
// Prior
sigma ~ uniform(0, 50);
for (t in 1:n_team) {
lambda[t] ~ normal(0, sigma);
}
// Likelihood
for (i in 1:n_team) {
for (j in 1:n_team) {
V[i, j] ~ binomial(N[i, j], exp(lambda[i])/(exp(lambda[i]) + exp(lambda[j])));
}
}
}
generated quantities {
int V_rep[n_team, n_team];         // Draws from posterior predictive dist
for (i in 1:n_team) {
for (j in 1:n_team) {
V_rep[i, j] = binomial_rng(N[i, j], exp(lambda[i])/(exp(lambda[i]) + exp(lambda[j])));
}
}
}
")
options(mc.cores = parallel::detectCores())
mlb_fit <- stan(model_code = stan_code_mlb,
data = stan_list_mlb,
iter = 2000,
chains = 4,
seed = 46)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
mean_team_strength <- rep(0, n_teams)
for (i in 1:n_teams) {
mean_team_strength[i] <- mean(mlb_pi[, i])
}
# mean_team_strength <- colMeans(mlb_pi)
print(mean_team_strength)
dodgers_strength <- mean_team_strength[levels(data2017$Home) == 'LAN']
astros_strength <- mean_team_strength[levels(data2017$Home) == 'HOU']
total_dodgers_win <- 0
total_astros_win <- 0
for (i in 1:1000) {
dodgers_win <- 0
astros_win <- 0
while (dodgers_win < 4 & astros_win < 4) {
dodgers <- rbinom(n=1, size=1, dodgers_strength/(dodgers_strength+astros_strength))
if (dodgers == 1) {
dodgers_win <- dodgers_win + 1
}
else {
astros_win <- astros_win + 1
}
}
if (dodgers_win > astros_win) {
total_dodgers_win <- total_dodgers_win + 1
}
else {
total_astros_win <- total_astros_win + 1
}
}
print(paste0('Based on 1000 simulations, the probability that the Astros would have won the 2017 World Series is ', total_astros_win/10, ' %'))
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
# mean_team_strength <- rep(0, n_teams)
# for (i in 1:n_teams) {
#   mean_team_strength[i] <- mean(mlb_pi[, i])
# }
mean_team_strength <- colMeans(mlb_pi)
print(mean_team_strength)
colnames(mean_team_strength)
names(mean_team_strength)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
# mean_team_strength <- rep(0, n_teams)
# for (i in 1:n_teams) {
#   mean_team_strength[i] <- mean(mlb_pi[, i])
# }
mean_team_strength <- colMeans(mlb_pi)
colnames(mean_team_strength) <- levels(data2017$Home)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
# mean_team_strength <- rep(0, n_teams)
# for (i in 1:n_teams) {
#   mean_team_strength[i] <- mean(mlb_pi[, i])
# }
mean_team_strength <- colMeans(mlb_pi)
colname(mean_team_strength) <- levels(data2017$Home)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
# mean_team_strength <- rep(0, n_teams)
# for (i in 1:n_teams) {
#   mean_team_strength[i] <- mean(mlb_pi[, i])
# }
mean_team_strength <- colMeans(mlb_pi)
names(mean_team_strength) <- levels(data2017$Home)
print(mean_team_strength)
sort(mean_team_strength)
V_ij
V_ij[1:10, 1:10]
N_ij[1:10, 1:10]
options(mc.cores = parallel::detectCores())
mlb_fit <- stan(model_code = stan_code_mlb,
data = stan_list_mlb,
iter = 5000,
chains = 4,
seed = 46)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
# mean_team_strength <- rep(0, n_teams)
# for (i in 1:n_teams) {
#   mean_team_strength[i] <- mean(mlb_pi[, i])
# }
mean_team_strength <- colMeans(mlb_pi)
names(mean_team_strength) <- levels(data2017$Home)
print(mean_team_strength)
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
# mean_team_strength <- rep(0, n_teams)
# for (i in 1:n_teams) {
#   mean_team_strength[i] <- mean(mlb_pi[, i])
# }
mean_team_strength <- colMeans(mlb_pi)
names(mean_team_strength) <- levels(data2017$Home)
print(sort(mean_team_strength))
dodgers_strength <- mean_team_strength[levels(data2017$Home) == 'LAN']
astros_strength <- mean_team_strength[levels(data2017$Home) == 'HOU']
total_dodgers_win <- 0
total_astros_win <- 0
for (i in 1:1000) {
dodgers_win <- 0
astros_win <- 0
while (dodgers_win < 4 & astros_win < 4) {
dodgers <- rbinom(n=1, size=1, dodgers_strength/(dodgers_strength+astros_strength))
if (dodgers == 1) {
dodgers_win <- dodgers_win + 1
}
else {
astros_win <- astros_win + 1
}
}
if (dodgers_win > astros_win) {
total_dodgers_win <- total_dodgers_win + 1
}
else {
total_astros_win <- total_astros_win + 1
}
}
print(paste0('Based on 1000 simulations, the probability that the Astros would have won the 2017 World Series is ', total_astros_win/10, ' %'))
dodgers_strength <- mean_team_strength[levels(data2017$Home) == 'LAN']
astros_strength <- mean_team_strength[levels(data2017$Home) == 'HOU']
total_dodgers_win <- 0
total_astros_win <- 0
for (i in 1:1000) {
dodgers_win <- 0
astros_win <- 0
while (dodgers_win < 4 & astros_win < 4) {
dodgers <- rbinom(n=1, size=1, dodgers_strength/(dodgers_strength+astros_strength))
if (dodgers == 1) {
dodgers_win <- dodgers_win + 1
}
else {
astros_win <- astros_win + 1
}
}
if (dodgers_win > astros_win) {
total_dodgers_win <- total_dodgers_win + 1
}
else {
total_astros_win <- total_astros_win + 1
}
}
print(paste0('Based on 1000 simulations, the probability that the Astros would have won the 2017 World Series is ', total_astros_win/10, ' %'))
print(dodgers_strength)
print(astros_strength)
dodgers_strength <- mean_team_strength[levels(data2017$Home) == 'LAN']
astros_strength <- mean_team_strength[levels(data2017$Home) == 'HOU']
total_dodgers_win <- 0
total_astros_win <- 0
for (i in 1:1000) {
dodgers_win <- 0
astros_win <- 0
while (dodgers_win < 4 & astros_win < 4) {
dodgers <- rbinom(n=1, size=1, dodgers_strength/(dodgers_strength+astros_strength))
if (dodgers == 1) {
dodgers_win <- dodgers_win + 1
}
else {
astros_win <- astros_win + 1
}
}
if (dodgers_win > astros_win) {
total_dodgers_win <- total_dodgers_win + 1
}
else {
total_astros_win <- total_astros_win + 1
}
}
print(dodgers_strength)
print(astros_strength)
print(paste0('Based on 1000 simulations, the probability that the Astros would have won the 2017 World Series is ', total_astros_win/10, ' %'))
V_ij
for (i in 1:n_teams) {
for (j in 1:n_teams) {
if (V_ij[i, j] + V_ij[j, i] != N_ij[i, j]) {
print(i)
print(j)
}
}
}
for (i in 1:n_teams) {
for (j in 1:n_teams) {
if (V_ij[i, j] + V_ij[j, i] != N_ij[i, j]) {
print(i)
print(j)
}
}
}
sum(t(V_ij)+V_ij != N_ij)
beta_0_summary <- summary(fit3e, pars=c("mu_0", "sigma_0"), probs=c(0.05, 0.95))$summary
mu_beta_0_mean = beta_0_summary[, "mean"][1]
sigma_beta_0_mean = beta_0_summary[, "mean"][2]
print(paste0('posterior mean of mu_beta_0 is: ', mu_beta_0_mean))
print(paste0('posterior mean of sigma_beta_0 is: ', sigma_beta_0_mean))
mu_beta_0_draws_real <- as.matrix(fit3e, pars = "mu_0")
sigma_beta_0_draws_real <- as.matrix(fit3e, pars = "sigma_0")
print(paste0('posterior mean of mu_beta_0 is: ', mean(mu_beta_0_draws_real)))
print(paste0('posterior mean of sigma_beta_0 is: ', mean(sigma_beta_0_draws_real)))
print(paste0('posterior std of mu_beta_0 is: ', std(mu_beta_0_draws_real)))
beta_0_summary <- summary(fit3e, pars=c("mu_0", "sigma_0"), probs=c(0.05, 0.95))$summary
mu_beta_0_mean = beta_0_summary[, "mean"][1]
sigma_beta_0_mean = beta_0_summary[, "mean"][2]
print(paste0('posterior mean of mu_beta_0 is: ', mu_beta_0_mean))
print(paste0('posterior mean of sigma_beta_0 is: ', sigma_beta_0_mean))
mu_beta_0_draws_real <- as.matrix(fit3e, pars = "mu_0")
sigma_beta_0_draws_real <- as.matrix(fit3e, pars = "sigma_0")
print(paste0('posterior mean of mu_beta_0 is: ', mean(mu_beta_0_draws_real)))
print(paste0('posterior mean of sigma_beta_0 is: ', mean(sigma_beta_0_draws_real)))
print(paste0('posterior std of mu_beta_0 is: ', sd(mu_beta_0_draws_real)))
print(paste0('posterior std of sigma_beta_0 is: ', sd(sigma_beta_0_draws_real)))
beta_0_summary <- summary(fit3e, pars=c("mu_0", "sigma_0"), probs=c(0.05, 0.95))$summary
mu_beta_0_mean = beta_0_summary[, "mean"][1]
sigma_beta_0_mean = beta_0_summary[, "mean"][2]
print(paste0('posterior mean of mu_beta_0 is: ', mu_beta_0_mean))
print(paste0('posterior mean of sigma_beta_0 is: ', sigma_beta_0_mean))
mu_beta_0_draws_real <- as.matrix(fit3e, pars = "mu_0")
sigma_beta_0_draws_real <- as.matrix(fit3e, pars = "sigma_0")
print(paste0('posterior mean of mu_beta_0 is: ', mean(mu_beta_0_draws_real)))
print(paste0('posterior mean of sigma_beta_0 is: ', mean(sigma_beta_0_draws_real)))
print(paste0('posterior std of mu_beta_0 is: ', sd(mu_beta_0_draws_real)))
print(paste0('posterior std of sigma_beta_0 is: ', sd(sigma_beta_0_draws_real)))
dodgers_strength <- mean_team_strength[levels(data2017$Home) == 'LAN']
astros_strength <- mean_team_strength[levels(data2017$Home) == 'HOU']
total_dodgers_win <- 0
total_astros_win <- 0
for (i in 1:1000) {
dodgers_win <- 0
astros_win <- 0
while (dodgers_win < 4 & astros_win < 4) {
dodgers <- rbinom(n=1, size=1, dodgers_strength/(dodgers_strength+astros_strength))
if (dodgers == 1) {
dodgers_win <- dodgers_win + 1
}
else {
astros_win <- astros_win + 1
}
}
if (dodgers_win > astros_win) {
total_dodgers_win <- total_dodgers_win + 1
}
else {
total_astros_win <- total_astros_win + 1
}
}
print(paste0('Based on 1000 simulations, the probability that the Astros would have won the 2017 World Series is ', total_astros_win/10, ' %'))
mlb_pi <- exp(as.matrix(mlb_fit, pars = "lambda"))
mean_team_strength <- colMeans(mlb_pi)
names(mean_team_strength) <- levels(data2017$Home)
print(sort(mean_team_strength))
